'use client'

import { useEffect, useState } from 'react'
import { useParams } from 'next/navigation'
import { db } from '@/lib/firebase'
import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'

const defaultData = {
  oneDigit: [""],
  onePair: [""],
  twoDigit: ["", ""],
  threeDigit: ["", "", ""],
  fourDigit: ["", "", "", ""],
  fiveDigit: ["", "", "", "", ""],
}

export default function AdminPredictionPage() {
  const { god } = useParams() as { god: string }
  const [form, setForm] = useState(defaultData)
  const [roundKey, setRoundKey] = useState("") // ‚úÖ ‡πÉ‡∏´‡πâ admin ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
  const [loading, setLoading] = useState(false)

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
  const fetchCurrent = async () => {
    if (!god || !roundKey) return
    const ref = doc(db, "predictions", god, "dates", roundKey)
    const snap = await getDoc(ref)
    if (snap.exists()) {
      setForm({
        oneDigit: snap.data().oneDigit || [""],
        onePair: snap.data().onePair || [""],
        twoDigit: snap.data().twoDigit || ["", ""],
        threeDigit: snap.data().threeDigit || ["", "", ""],
        fourDigit: snap.data().fourDigit || ["", "", "", ""],
        fiveDigit: snap.data().fiveDigit || ["", "", "", "", ""],
      })
    } else {
      setForm(defaultData)
    }
  }

  const handleChange = (field: keyof typeof defaultData, index: number, value: string) => {
    setForm((prev) => {
      const updated = [...prev[field]]
      updated[index] = value
      return { ...prev, [field]: updated }
    })
  }

  const handleSave = async () => {
    if (!god || !roundKey) return alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
    setLoading(true)

    try {
      const ref = doc(db, "predictions", god, "dates", roundKey)
      await setDoc(ref, {
        ...form,
        updatedAt: serverTimestamp(),
      })

      alert(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏•‡∏Ç‡∏Ç‡∏≠‡∏á "${god}" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏ß‡∏î ${roundKey} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`)
    } catch (e) {
      console.error(e)
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
    } finally {
      setLoading(false)
    }
  }

  const renderInputs = (field: keyof typeof defaultData, label: string) => (
    <div>
      <p className="mb-1 font-medium">{label}</p>
      <div className="flex gap-2">
        {form[field].map((val, i) => (
          <Input
            key={i}
            value={val}
            onChange={(e) => handleChange(field, i, e.target.value)}
            className="w-12 text-center"
            maxLength={1}
          />
        ))}
      </div>
    </div>
  )

  return (
    <div className="max-w-md mx-auto mt-10 p-4 border rounded-xl shadow space-y-4">
      <h1 className="text-2xl font-bold mb-4">‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏û {god}</h1>

      <div>
        <p className="mb-1 font-medium">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 2025-09-25)</p>
        <Input
          value={roundKey}
          onChange={(e) => setRoundKey(e.target.value)}
          placeholder="YYYY-MM-DD"
          className="mb-2"
        />
        <Button onClick={fetchCurrent} className="mb-4">üîç ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏•‡∏Ç‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ</Button>
      </div>

      {renderInputs("oneDigit", "‡∏ß‡∏¥‡πà‡∏á‡πÇ‡∏î‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")}
      {renderInputs("onePair", "‡∏¢‡∏¥‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏£‡∏≠‡∏á")}
      {renderInputs("twoDigit", "2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πâ‡∏≤")}
      {renderInputs("threeDigit", "3 ‡∏ï‡∏±‡∏ß‡πÅ‡∏°‡πà")}
      {renderInputs("fourDigit", "4 ‡∏ï‡∏±‡∏ß‡∏°‡∏´‡∏≤‡∏£‡∏ß‡∏¢")}
      {renderInputs("fiveDigit", "5 ‡∏ï‡∏±‡∏ß‡∏£‡∏ß‡∏¢‡πÑ‡∏ß")}

      <Button
        onClick={handleSave}
        disabled={loading}
        className="w-full mt-4 bg-yellow-500 hover:bg-yellow-600"
      >
        {loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏•‡∏Ç"}
      </Button>
    </div>
  )
}
