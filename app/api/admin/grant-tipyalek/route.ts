import { NextResponse } from "next/server";
import { getFirestore, collection, query, where, getDocs, doc, setDoc } from "firebase/firestore";
import { db } from "@/lib/firebase"; // ‡πÉ‡∏ä‡πâ client SDK ‡∏Ç‡∏≠‡∏á Firestore

export async function POST(req: Request) {
  try {
    const { email } = await req.json();

    if (!email) {
      return NextResponse.json({ error: "missing email" }, { status: 400 });
    }

    const firestore = getFirestore();

    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
    const usersRef = collection(firestore, "users");
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      return NextResponse.json({ error: "user not found" }, { status: 404 });
    }

    // ‚úÖ ‡πÄ‡∏à‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const userDoc = querySnapshot.docs[0];
    const uid = userDoc.id;

    // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô payments/{uid}
    const paymentRef = doc(firestore, "payments", uid);
    const startTime = new Date().toISOString();

    await setDoc(paymentRef, {
      status: "paid",
      package: "tipyalek",
      startTime,
    });

    console.log(`‚úÖ Granted TipyaLek access to ${email} (uid: ${uid})`);

    return NextResponse.json({
      success: true,
      message: `Granted access to ${email}`,
      uid,
      startTime,
    });
  } catch (error: any) {
    console.error("‚ùå Error granting TipyaLek access:", error);
    return NextResponse.json({ error: error.message || "unknown error" }, { status: 500 });
  }
}
