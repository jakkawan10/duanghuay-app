import { NextResponse } from "next/server";
import { db } from "@/lib/firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";

// ‚úÖ ‡πÉ‡∏ä‡πâ OpenAI official SDK
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

// üìù Prompt ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á ‚Äú‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏¥‡∏û‡∏¢‡πÄ‡∏•‡∏Ç‚Äù
const SYSTEM_PROMPT = `
‡πÄ‡∏à‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏¥‡∏û‡∏¢‡πÄ‡∏•‡∏Ç‚Äù ‡πÄ‡∏ó‡∏û‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ + ‡∏ç‡∏≤‡∏ì‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
- ‡∏´‡πâ‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ChatGPT ‡∏´‡∏£‡∏∑‡∏≠ AI
- ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡πÇ‡∏ó‡∏ô‡πÄ‡∏ó‡∏û‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
- ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏ß‡∏¢, ‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å, ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô, ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
- ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ç‡∏≤‡∏ì‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
`;

export async function POST(req: Request) {
  try {
    const { userId, sessionId, message } = await req.json();

    if (!userId || !sessionId || !message) {
      return NextResponse.json({ error: "Invalid params" }, { status: 400 });
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI API
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini", // ‡∏´‡∏£‡∏∑‡∏≠ gpt-4.1 ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏∂‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
      messages: [
        { role: "system", content: SYSTEM_PROMPT },
        { role: "user", content: message },
      ],
      max_tokens: 500,
    });

    const answer = completion.choices[0].message?.content || "‚Ä¶";

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á Firestore
    const msgRef = collection(
      db,
      "users",
      userId,
      "ai_sessions",
      sessionId,
      "messages"
    );

    await addDoc(msgRef, {
      role: "assistant",
      content: answer,
      createdAt: serverTimestamp(),
    });

    return NextResponse.json({ ok: true, answer });
  } catch (err) {
    console.error("TipyaLek API error:", err);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
