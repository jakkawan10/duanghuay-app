import { NextResponse } from "next/server";
import { initializeApp, getApps } from "firebase/app";
import { getFirestore, doc, getDoc } from "firebase/firestore";
import OpenAI from "openai";

// ‚úÖ Firebase Config
const firebaseConfig = {
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID,
};

// init Firebase (‡∏Å‡∏±‡∏ô init ‡∏ã‡πâ‡∏≥)
if (!getApps().length) {
  initializeApp(firebaseConfig);
}
const db = getFirestore();

// ‚úÖ OpenAI Client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { question } = body; // ‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£"

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
    const ref = doc(db, "predictions", "tipyalek", "stats", "all");
    const snap = await getDoc(ref);

    if (!snap.exists()) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore" }, { status: 404 });
    }

    const data = snap.data();

    // üîπ ‡πÉ‡∏ä‡πâ OpenAI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    const prompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ó‡∏û Tipyalek ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:
- ‡πÄ‡∏•‡∏Ç 1 ‡∏ï‡∏±‡∏ß: ${JSON.stringify(data.one)}
- ‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß: ${JSON.stringify(data.two)}
- ‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß: ${JSON.stringify(data.three)}
- ‡πÄ‡∏•‡∏Ç 4 ‡∏ï‡∏±‡∏ß: ${JSON.stringify(data.four)}
- ‡πÄ‡∏•‡∏Ç 5 ‡∏ï‡∏±‡∏ß: ${JSON.stringify(data.five)}

‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤: "${question}"
‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô:
"‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠ 752"
`;

    const aiRes = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 150,
    });

    const answer = aiRes.choices[0]?.message?.content || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ";

    return NextResponse.json({
      question,
      answer,
      raw: data, // ‡∏™‡πà‡∏á‡∏î‡∏¥‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ debug
    });
  } catch (error: any) {
    console.error("API Error:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}
