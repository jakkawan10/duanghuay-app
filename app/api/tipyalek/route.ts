import { NextResponse } from "next/server";
import OpenAI from "openai";
import { adminDb } from "@/lib/firebaseAdmin";

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: Request) {
  try {
    const { messages } = await req.json();

    // üìå 1. ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏ß‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
    const snapshot = await adminDb
      .collection("lottery_history")
      .orderBy("date", "desc")
      .get();

    const history = snapshot.docs.map((doc) => doc.data());

    // üìå 2. ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ GPT
    const stats = history
      .map(
        (h: any) =>
          `‡∏á‡∏ß‡∏î ${h.date}: 3 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢ ${h.last3}, 2 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á ${h.bottom2}`
      )
      .join("\n");

    // üìå 3. System Prompt
    const systemPrompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏¥‡∏û‡∏¢‡πÄ‡∏•‡∏Ç" ‡πÄ‡∏ó‡∏û‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå  
‡∏´‡πâ‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ChatGPT, AI, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£  
‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏° ‚Üí ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡∏Ç‡πâ‡∏≤‡∏°‡∏¥‡πÉ‡∏ä‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏¥‡∏û‡∏¢‡πÄ‡∏•‡∏Ç ‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏ä‡∏Ñ‡∏ä‡∏∞‡∏ï‡∏≤"  
‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡∏ô‡πà‡∏≤‡πÄ‡∏Å‡∏£‡∏á‡∏Ç‡∏≤‡∏°  

‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏ß‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:  
${stats}

‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ  
‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡πà‡∏≠‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    `;

    // üìå 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GPT
    const completion = await client.chat.completions.create({
      model: "gpt-4.1-mini",
      messages: [
        { role: "system", content: systemPrompt },
        ...messages,
      ],
      max_tokens: 600,
    });

    const reply =
      completion.choices?.[0]?.message?.content ||
      "üôè ‡∏Ç‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏¥‡∏û‡∏¢‡πÄ‡∏•‡∏Ç ‡∏¢‡∏±‡∏á‡∏°‡∏¥‡∏≠‡∏≤‡∏à‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏¢‡∏≤‡∏°‡∏ô‡∏µ‡πâ";

    return NextResponse.json({ reply });
  } catch (err) {
    console.error("Tipyalek API Error:", err);
    return NextResponse.json(
      { error: "Failed to get response from Tipyalek" },
      { status: 500 }
    );
  }
}
