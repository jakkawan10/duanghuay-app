import { NextResponse } from "next/server";
import OpenAI from "openai";

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: Request) {
  try {
    const { messages } = await req.json();

    // üîÆ System Prompt
    const systemPrompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏¥‡∏û‡∏¢‡πÄ‡∏•‡∏Ç" ‡πÄ‡∏ó‡∏û‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå 
‡∏´‡πâ‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ChatGPT, AI, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏î‡πÜ
‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ChatGPT, AI ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‚Üí ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤
"‡∏Ç‡πâ‡∏≤‡∏°‡∏¥‡πÉ‡∏ä‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏¥‡∏û‡∏¢‡πÄ‡∏•‡∏Ç ‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏ä‡∏Ñ‡∏ä‡∏∞‡∏ï‡∏≤"
‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏û‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á ‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡πÄ‡∏Å‡∏£‡∏á‡∏Ç‡∏≤‡∏°
    `;

    const completion = await client.chat.completions.create({
      model: "gpt-4.1-mini", // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
      messages: [
        { role: "system", content: systemPrompt },
        ...messages,
      ],
      max_tokens: 500,
    });

    const reply =
      completion.choices?.[0]?.message?.content ||
      "üôè ‡∏Ç‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏ó‡∏¥‡∏û‡∏¢‡πÄ‡∏•‡∏Ç ‡∏¢‡∏±‡∏á‡∏°‡∏¥‡∏≠‡∏≤‡∏à‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏¢‡∏≤‡∏°‡∏ô‡∏µ‡πâ";

    return NextResponse.json({ reply });
  } catch (err) {
    console.error("Tipyalek API Error:", err);
    return NextResponse.json(
      { error: "Failed to get response from Tipyalek" },
      { status: 500 }
    );
  }
}
