'use client';

import { useState } from 'react';
import { doc, setDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';

const deityOptions = [
  { label: '‡πÄ‡∏à‡πâ‡∏≤‡πÅ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≠‡∏¢‡∏ö‡∏∏‡∏ç', value: 'sroiboon' },
  { label: '‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏ì‡∏µ‡πÄ‡∏ß‡∏ó‡∏¢‡∏°‡∏ô‡∏ï‡πå', value: 'maneewitch' },
  { label: '‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡πÅ‡∏™‡∏ô‡∏î‡∏µ', value: 'intra' },
  { label: '‡πÄ‡∏à‡πâ‡∏≤‡πÅ‡∏°‡πà‡∏î‡∏≤‡∏ô‡∏î‡∏≠‡∏Å‡∏©‡πå‡∏®‡πå', value: 'dandok' },
];

export default function AdminLuckyPage() {
  const [deity, setDeity] = useState('sroiboon');
  const [solo, setSolo] = useState('');
  const [singleBackup, setSingleBackup] = useState('');
  const [double, setDouble] = useState('');
  const [triple, setTriple] = useState('');
  const [quad, setQuad] = useState('');
  const [five, setFive] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    setLoading(true);
    try {
      const payload = {
        deity,
        updatedAt: serverTimestamp(),
        category: {
          solo,
          singleBackup,
          double: double.split(',').map(s => s.trim()).filter(Boolean),
          triple: triple.split(',').map(s => s.trim()).filter(Boolean),
          quad: quad.split(',').map(s => s.trim()).filter(Boolean),
          five: five.split(',').map(s => s.trim()).filter(Boolean),
        },
      };

      await setDoc(doc(db, 'luckynumbers', deity), payload);

      toast.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (err) {
      console.error(err);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-xl mx-auto p-6">
      <h1 className="text-xl font-bold mb-4">üßô‚Äç‚ôÄÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏û</h1>

      <label className="block mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡∏û</label>
      <select
        value={deity}
        onChange={e => setDeity(e.target.value)}
        className="mb-4 w-full border rounded p-2"
      >
        {deityOptions.map(opt => (
          <option key={opt.value} value={opt.value}>
            {opt.label}
          </option>
        ))}
      </select>

      <Input placeholder="‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (1 ‡∏ï‡∏±‡∏ß)" value={solo} onChange={e => setSolo(e.target.value)} className="mb-2" />
      <Input placeholder="‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏≥‡∏£‡∏≠‡∏á" value={singleBackup} onChange={e => setSingleBackup(e.target.value)} className="mb-2" />
      <Textarea placeholder="‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,)" value={double} onChange={e => setDouble(e.target.value)} className="mb-2" />
      <Textarea placeholder="‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,)" value={triple} onChange={e => setTriple(e.target.value)} className="mb-2" />
      <Textarea placeholder="‡πÄ‡∏•‡∏Ç 4 ‡∏ï‡∏±‡∏ß (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,)" value={quad} onChange={e => setQuad(e.target.value)} className="mb-2" />
      <Textarea placeholder="‡πÄ‡∏•‡∏Ç 5 ‡∏ï‡∏±‡∏ß (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,)" value={five} onChange={e => setFive(e.target.value)} className="mb-4" />

      <Button disabled={loading} onClick={handleSubmit}>
        {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î'}
      </Button>
    </div>
  );
}
